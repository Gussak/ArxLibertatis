/*
 * Copyright 2011-2022 Arx Libertatis Team (see the AUTHORS file)
 *
 * This file is part of Arx Libertatis.
 *
 * Arx Libertatis is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Arx Libertatis is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Arx Libertatis.  If not, see <http://www.gnu.org/licenses/>.
 */
/* Based on:
===========================================================================
ARX FATALIS GPL Source Code
Copyright (C) 1999-2010 Arkane Studios SA, a ZeniMax Media company.

This file is part of the Arx Fatalis GPL Source Code ('Arx Fatalis Source Code'). 

Arx Fatalis Source Code is free software: you can redistribute it and/or modify it under the terms of the GNU General Public 
License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Arx Fatalis Source Code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with Arx Fatalis Source Code.  If not, see 
<http://www.gnu.org/licenses/>.

In addition, the Arx Fatalis Source Code is also subject to certain additional terms. You should have received a copy of these 
additional terms immediately following the terms and conditions of the GNU General Public License which accompanied the Arx 
Fatalis Source Code. If not, please request a copy in writing from Arkane Studios at the address below.

If you have questions concerning this license or the applicable additional terms, you may contact in writing Arkane Studios, c/o 
ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.
===========================================================================
*/
// Code: Cyril Meynier
//
// Copyright (c) 1999 ARKANE Studios SA. All rights reserved

#ifndef ARX_SCENE_OBJECT_H
#define ARX_SCENE_OBJECT_H

#include <memory>
#include <string_view>

#include "graphics/GraphicsTypes.h"

void MakeUserFlag(TextureContainer * tc);
VertexGroupId EERIE_OBJECT_GetGroup(const EERIE_3DOBJ * obj, std::string_view groupname);
VertexSelectionId EERIE_OBJECT_GetSelection(const EERIE_3DOBJ * obj, std::string_view selname);

VertexId getNamedVertex(const EERIE_3DOBJ * eobj, std::string_view text);
VertexGroupId getGroupForVertex(const EERIE_3DOBJ * eobj, VertexId vertex);

/*!
 * Load a possibly cached 3D object using the default texture path.
 * 
 * \param pbox true if the object should have a physics box.
 */
std::unique_ptr<EERIE_3DOBJ> loadObject(const res::path & file, bool pbox = true);

EERIE_3DOBJ * Eerie_Copy(const EERIE_3DOBJ * obj);
void EERIE_Object_Precompute_Fast_Access(EERIE_3DOBJ * object);
void EERIE_3DOBJ_RestoreTextures(EERIE_3DOBJ * eobj);
void EERIE_OBJECT_CenterObjectCoordinates(EERIE_3DOBJ * ret);
void EERIE_CreateCedricData(EERIE_3DOBJ * eobj);

enum LODFlag { //TODOA invert values order to not be confuse comparing ex.: LOD_HIGH > LOD_BAD. Must refactor all comparisons. A simple way would be to make LODFlag vars private and: bool cmp(lodA,">=",lodB); and after that use sed to replace it with lodA >= lodB. Remembe also >> and << !
	LOD_NONE    = 0, // just means it was not initialized yet and shall not be used
	LOD_PERFECT = 1 << 0, // perfect/original, last 3D model aimed at and nearby
	LOD_HIGH    = 1 << 1, // perceptually High, little loss, still nearby camera
	LOD_MEDIUM  = 1 << 2, // perceptually Medium, some loss, a bit far, but still looks good
	LOD_LOW     = 1 << 3, // perceptually Low, lossy, far, but carefully prepared to keep contour shape at least
	LOD_BAD     = 1 << 4, // perceptually bad, very lossy, very far, visually messed up but still resembles the original
	LOD_FLAT    = 1 << 5, // flat shape mesh that "looks" (rotates) to the active camera, square, 2 triangles, could have a front, left, right, back, top and bottom flat small textures. these textures could be the very icons shown in the inventory. // LOD_FLAT could be automatic using the icon as texture in a squared/rectangled (2 triangles) plane.
	LOD_ICON    = 1 << 6, // AUTOMATIC: flat, 2 triangles like 1 rectangular face, uses the item icon as texture. The mod developers should not need to create this, it shall be a simplified LOD auto generated by the engine by stretching that mesh to match the icon size ex.: mesh rect size = 1.fx1.f * iconSize = 32x64 (torch), but checks the torch model and detects width is bigger than height, then mesh rect becomes 64x32. Sizes found in assets: 32x32 32x64 32x96 64x32 64x64 64x96 96x32 96x64 96x96 is like squares 1x1 1x2 1x3 2x1 2x2 2x3 3x1 3x2 3x3. 
};
DECLARE_FLAGS(LODFlag, LODFlags)
DECLARE_FLAGS_OPERATORS(LODFlags);
LODFlag strToLOD(std::string str, std::string strDefault = "PERFECT");
std::string LODtoStr(LODFlag lt);
bool load3DModelAndLOD(Entity & io, const res::path & file, bool pbox);
void LODIconAsSkin(EERIE_3DOBJ * obj, TextureContainer * texIcon);
res::path fix3DModelFilename(Entity & io, const res::path & fileRequest);

#endif // ARX_SCENE_OBJECT_H
